title = "Global gitleaks config"

[allowlist]
	description = "Allowlisted files"
	files = ['''^\.?gitleaks.toml$''', # Ignoring this file
		'''(.*?)(jpg|gif|doc|pdf|bin)$''', # Ignoring common binaries
		'''^(.*?)_test\.go$''', # Ignoring Go test files
		'''^(.*?)\.(spec|test)\.(j|t)s$''', # Ignoring JavaScript and TypeScript test files
		'''(go.mod|go.sum)$''', # Ignoring Go manifests
		'''vendor\.json''',
		'''Gopkg\.(lock|toml)''',
		'''package-lock\.json''', # Ignoring Node/JS manifests
		'''package\.json''',
		'''composer\.json''',
		'''composer\.lock''', #Ignoring PHP manifests
		'''yarn\.lock''']
	paths = ["node_modules", # Ignoring Node dependencies
		"vendor", # Ignoring Go dependencies
		"test", # Ignoring test directories
		"tests"]
	regexes = ['''test'''] # Ignoring lines with test


[[rules]]
	description = "AWS Secret Key"
	regex = '''(?i)aws(.{0,20})?(?-i)[0-9a-zA-Z\/+]{40}'''
	tags = ["key", "AWS"]

[[rules]]
	description = "AWS MWS key"
	regex = '''amzn\.mws\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'''
	tags = ["key", "AWS", "MWS"]

[[rules]]
	description = "Facebook Secret Key"
	regex = '''(?i)(facebook|fb)(.{0,20})?(?-i)[0-9a-f]{32}'''
	tags = ["key", "Facebook"]

[[rules]]
	description = "Facebook Client ID"
	regex = '''(?i)(facebook|fb)(.{0,20})?[0-9]{13,17}'''
	tags = ["key", "Facebook"]

[[rules]]
	description = "Twitter Secret Key"
	regex = '''(?i)twitter(.{0,20})?[0-9a-z]{35,44}'''
	tags = ["key", "Twitter"]

[[rules]]
	description = "Twitter Client ID"
	regex = '''(?i)twitter(.{0,20})?[0-9a-z]{18,25}'''
	tags = ["client", "Twitter"]

[[rules]]
	description = "Github"
	regex = '''(?i)github(.{0,20})?(?-i)[0-9a-zA-Z]{35,40}'''
	tags = ["key", "Github"]

[[rules]]
	description = "LinkedIn Client ID"
	regex = '''(?i)linkedin(.{0,20})?(?-i)[0-9a-z]{12}'''
	tags = ["client", "LinkedIn"]

[[rules]]
	description = "LinkedIn Secret Key"
	regex = '''(?i)linkedin(.{0,20})?[0-9a-z]{16}'''
	tags = ["secret", "LinkedIn"]

[[rules]]
	description = "Slack"
	regex = '''xox[baprs]-([0-9a-zA-Z]{10,48})?'''
	tags = ["key", "Slack"]

[[rules]]
	description = "Asymmetric Private Key"
	regex = '''-----BEGIN ((EC|PGP|DSA|RSA|OPENSSH) )?PRIVATE KEY( BLOCK)?-----'''
	tags = ["key", "AsymmetricPrivateKey"]

[[rules]]
	description = "Google API key"
	regex = '''AIza[0-9A-Za-z\\-_]{35}'''
	tags = ["key", "Google"]

[[rules]]
	description = "Google (GCP) Service Account"
	regex = '''"type": "service_account"'''
	tags = ["key", "Google"]

[[rules]]
	description = "Heroku API key"
	regex = '''(?i)heroku(.{0,20})?[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'''
	tags = ["key", "Heroku"]

[[rules]]
	description = "MailChimp API key"
	regex = '''(?i)(mailchimp|mc)(.{0,20})?[0-9a-f]{32}-us[0-9]{1,2}'''
	tags = ["key", "Mailchimp"]

[[rules]]
	description = "Mailgun API key"
	regex = '''((?i)(mailgun|mg)(.{0,20})?)?key-[0-9a-z]{32}'''
	tags = ["key", "Mailgun"]

[[rules]]
	description = "PayPal Braintree access token"
	regex = '''access_token\$production\$[0-9a-z]{16}\$[0-9a-f]{32}'''
	tags = ["key", "Paypal"]

[[rules]]
	description = "Picatic API key"
	regex = '''sk_live_[0-9a-z]{32}'''
	tags = ["key", "Picatic"]

[[rules]]
	description = "SendGrid API Key"
	regex = '''SG\.[\w_]{16,32}\.[\w_]{16,64}'''
	tags = ["key", "SendGrid"]

[[rules]]
	description = "Slack Webhook"
	regex = '''https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}'''
	tags = ["key", "slack"]

[[rules]]
	description = "Stripe API key"
	regex = '''(?i)stripe(.{0,20})?[sr]k_live_[0-9a-zA-Z]{24}'''
	tags = ["key", "Stripe"]

[[rules]]
	description = "Square access token"
	regex = '''sq0atp-[0-9A-Za-z\-_]{22}'''
	tags = ["key", "square"]

[[rules]]
	description = "Square OAuth secret"
	regex = '''sq0csp-[0-9A-Za-z\\-_]{43}'''
	tags = ["key", "square"]

[[rules]]
	description = "Twilio API key"
	regex = '''(?i)twilio(.{0,20})?SK[0-9a-f]{32}'''
	tags = ["key", "twilio"]

# The following rules check for credentials assigned to variables that its value has an entropy of more than 3 bits.
# To achieve this there's a regexp for each language. The regexp checks for a variable with a suspicious name followed
# by a value assignation (for example, := in Go, = in JS, etc.). Then, looks for a group of non-space characters enclosed
# between quotes. If that group has an entropy higher than 3 bits the rule will trigger.

[[rules]]
	description = "Hardcoded credentials in Go files"
	file = '''^(.*?)\.go$'''
	regex = '''(?i)(?:secret|key|signature|password|pwd|pass|token)(?:\w|\s*?)(?:=|:=)(?:\s*?)[\"'`](.{4,120}?)[\"'`]'''
	tags = ["credentials", "hardcoded", "go"]
	[[rules.Entropies]]
		Min = "3"
		Max = "7"
		Group = "1"

[[rules]]
	description = "Hardcoded credentials in JavaScript or TypeScript files"
	file = '''^(.*?)\.(?:j|t)s$'''
	regex = '''(?i)(?:secret|key|signature|password|pwd|pass|token)(?:\w|\s*?)(?:=){1}(?:\s{0,10})[\"'`](.*?)[\"'`]'''
	tags = ["credentials", "hardcoded", "js"]
	[[rules.Entropies]]
		Min = "3"
		Max = "7"
		Group = "1"

[[rules]]
	description = "Hardcoded credentials in PHP files"
	file = '''^(.*?)\.php$'''
	regex = '''(?i)(?:secret|key|signature|password|pwd|pass|token)(?:.{0,20})(?:=){1}(?:.{0,10})[\"'`](.{4,120})[\"'`]'''
	tags = ["credentials", "hardcoded", "php"]
	[[rules.Entropies]]
		Min = "3"
		Max = "7"
		Group = "1"

[[rules]]
	description = "Hardcoded credentials in YAML files as quoted strings"
	file = '''^(.*?)\.y(a|)ml$'''
	regex = '''(?i)(?:secret|key|signature|password|pwd|pass|token)(?:.{0,20})(?::){1}(?:\s{0,10})(?:[\"'](.{4,120})[\"'])'''
	tags = ["credentials", "hardcoded", "yaml"]
	[[rules.Entropies]]
		Min = "3"
		Max = "7"
		Group = "1"
	[rules.allowlist]
		description = "Skip YAML Serverless variables, grabbed and concated values, encrypted secrets, and values with jinja2 placeholders"
		regexes = ['''\${(?:.)+}''', '''(?i)\(\((?:\s)*?(?:grab|concat)(?:.)*?(?:\s)*?\)\)''', '''(?i)!!enveloped:(?:\S)+''', '''(?:.)*?{{(?:.)*?}}''']

[[rules]]
	description = "Hardcoded credentials in YAML files as unquoted strings"
	file = '''^(.*?)\.y(a|)ml$'''
	regex = '''(?i)(?:secret|key|signature|password|pwd|pass|token)(?:.{0,20})(?::){1}(?:\s{0,10})(\S{4,120})'''
	tags = ["credentials", "hardcoded", "yaml"]
	[[rules.Entropies]]
		Min = "3.5" # A higher entropy is required for this type of match, as unquoted can trigger many false positives
		Max = "7"
		Group = "1"
	[rules.allowlist]
		description = "Skip YAML Serverless variables, grabbed and concated values, encrypted secrets, and values with jinja2 placeholders"
		regexes = ['''\${(?:.)+}''', '''(?i)\(\((?:\s)*?(?:grab|concat)(?:.)*?(?:\s)*?\)\)''', '''(?i)!!enveloped:(?:\S)+''', '''(?:.)*?{{(?:.)*?}}''']

[[rules]]
	description = "Hardcoded credentials in YAML files as multiline strings"
	file = '''^(.*?)\.y(a|)ml$'''
	regex = '''(?i)(?:secret|key|signature|password|pwd|pass|token)(?:.{0,20})(?::){1}(?:\s{0,10})(?:\|(?:-|))\n(?:\s{0,10})(\S{4,120})'''
	tags = ["credentials", "hardcoded", "yaml"]
	[[rules.Entropies]]
		Min = "4"
		Max = "7"
		Group = "1"

[[rules]]
	description = "Hardcoded credentials in HCL files (*.tf)"
	file = '''^(.*?)\.tf$'''
	regex = '''(?i)(?:secret|key|signature|password|pwd|pass|token)(?:.{0,20})(?:=){1}(?:\s)*?"(.{4,120})"'''
	tags = ["credentials", "hardcoded", "hcl"]
	[[rules.Entropies]]
		Min = "3"
		Max = "7"
		Group = "1"
	[rules.allowlist]
		description = "Skip variable substitution"
		regexes = ['''\${(?:.)*?}''']
